************************************************************************************************************************
#include <initializer_list>
#include <string>
#include <vector>

int main()
{
   const int arr[] = {1, 4, 6, 7, 9};
   using namespace std;
   initializer_list<int> ilist{3, 6, 7, 9, 2}; //you can not mutate it is read only
    //initializer_list<int>::iterator const_iterator = ilist.begin(); //const int *
   ilist.begin();
   ilist.size();
    ilist.end();
  // const int * iterator = ilist.end();
}

************************************************************************************************************************

#include <initializer_list>
#include <string>
#include <vector>

int main()
{
    auto x = {1}; //deduced type std::initializer_list<int>
    auto y{1}; //deduced type int
}

************************************************************************************************************************
#include <initializer_list>
#include <iostream>
#include <ostream>
#include <string>
#include <vector>

class MyClass {
public:
   MyClass()
   {
      std::cout << "MyClass::MyClass()" << std::endl;

   }

   MyClass(int)
   {
      std::cout << "MyClass::MyClass(int)" << std::endl;

   }

   MyClass(int, int)
   {
      std::cout << "MyClass::MyClass(int, int)" << std::endl;
   }

   MyClass(std::initializer_list<int> il)
   {
      std::cout << "MyClass::MyClass(std::initializer_list<int>)" << std::endl;
   }

};

int main()
{
   //  {//here no narrowing conversion normally}

   MyClass m1(1);

   MyClass m2(2);

   MyClass m3(3, 4);

   MyClass m4(5, 6);

   /* Here is the log while MyClass(std::initializer_list<int> il) is commneted out
   *MyClass::MyClass(int)
   MyClass::MyClass(int)
   MyClass::MyClass(int, int)
   MyClass::MyClass(int, int)*/
}
************************************************************************************************************************

but what if ???

#include <initializer_list>
#include <iostream>
#include <ostream>
#include <string>
#include <vector>

class MyClass {
public:
   MyClass()
   {
      std::cout << "MyClass::MyClass()" << std::endl;

   }

   MyClass(int)
   {
      std::cout << "MyClass::MyClass(int)" << std::endl;

   }

   MyClass(int, int)
   {
      std::cout << "MyClass::MyClass(int, int)" << std::endl;
   }

   MyClass(std::initializer_list<int> il)
   {
      std::cout << "MyClass::MyClass(std::initializer_list<int>)" << std::endl;
   }

};

int main()
{
   //  {//here no narrowing conversion normally}

   MyClass m1{1};

   MyClass m2{2};

   /*
   *MyClass::MyClass(std::initializer_list<int>)
   MyClass::MyClass(std::initializer_list<int>)
   */

   //MyClass m3(3, 4);

   //MyClass m4(5, 6);


}

************************************************************************************************************************
#include <initializer_list>
#include <iostream>
#include <ostream>
#include <string>
#include <vector>

class MyClass {
public:
   MyClass()
   {
      std::cout << "MyClass::MyClass()" << std::endl;

   }

   MyClass(int)
   {
      std::cout << "MyClass::MyClass(int)" << std::endl;

   }

   MyClass(int, int)
   {
      std::cout << "MyClass::MyClass(int, int)" << std::endl;
   }

   MyClass(std::initializer_list<int> il)
   {
      std::cout << "MyClass::MyClass(std::initializer_list<int>)" << std::endl;
   }

};

int main()
{
   //  {//here no narrowing conversion normally}

   MyClass m1(1);

   MyClass m2{2};

   /*
   MyClass::MyClass(int)
   MyClass::MyClass(std::initializer_list<int>)
   */

   //MyClass m3(3, 4);

   //MyClass m4(5, 6);


}
************************************************************************************************************************


